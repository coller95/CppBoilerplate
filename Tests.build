# Tests.build - Makefile fragment for test-related targets
# Provides convenient test targets at the project root level

# ============================================================================
# OUTPUT MODE CONFIGURATION (Multi-tiered)
# ============================================================================
# Inherit VERBOSE setting from main Makefile (supports minimal/standard/debug/human/silent)
VERBOSE ?= minimal

# Map legacy numeric values to named modes for backward compatibility
ifeq ($(VERBOSE),0)
    override VERBOSE = minimal
endif
ifeq ($(VERBOSE),1)
    override VERBOSE = human
endif

# Output formatting based on multi-tiered mode
ifeq ($(VERBOSE),human)
    # Human mode: Colorful, descriptive output with emojis
    TEST_PREFIX = @echo
    TEST_SUCCESS = "üß™"
    TEST_BUILD = "üîß" 
    TEST_CLEAN = "üßπ"
    TEST_DEBUG = "üêõ"
    TEST_HELP = "üìã"
    TEST_STATS = "üìä"
else ifeq ($(VERBOSE),debug)
    # Debug mode: Agent + detailed context for troubleshooting
    TEST_PREFIX = @echo "[TEST]"
    TEST_SUCCESS = "RUN"
    TEST_BUILD = "BUILD"
    TEST_CLEAN = "CLEAN"
    TEST_DEBUG = "DEBUG"
    TEST_HELP = "HELP"
    TEST_STATS = "STATS"
else ifeq ($(VERBOSE),standard)
    # Standard mode: Balanced agent output
    TEST_PREFIX = @echo "[TEST]"
    TEST_SUCCESS = "RUN"
    TEST_BUILD = "BUILD" 
    TEST_CLEAN = "CLEAN"
    TEST_DEBUG = "DEBUG"
    TEST_HELP = "HELP"
    TEST_STATS = "STATS"
else ifeq ($(VERBOSE),minimal)
    # Minimal mode: Ultra-minimal for best performance
    TEST_PREFIX = @echo "[TEST]"
    TEST_SUCCESS = ""
    TEST_BUILD = ""
    TEST_CLEAN = "CLEAN_ALL"
    TEST_DEBUG = ""
    TEST_HELP = ""
    TEST_STATS = ""
else ifeq ($(VERBOSE),silent)
    # Silent mode: Errors only
    TEST_PREFIX = @true
    TEST_SUCCESS = ""
    TEST_BUILD = ""
    TEST_CLEAN = ""
    TEST_DEBUG = ""
    TEST_HELP = ""
    TEST_STATS = ""
else
    # Fallback to minimal for unknown modes
    TEST_PREFIX = @echo "[TEST]"
    TEST_SUCCESS = ""
    TEST_BUILD = ""
    TEST_CLEAN = "CLEAN_ALL"
    TEST_DEBUG = ""
    TEST_HELP = ""
    TEST_STATS = ""
endif

# ============================================================================
# PHONY TARGETS - Declare all test targets as phony
# ============================================================================
.PHONY: test test-clean test-help test-stats test-debug-all
.PHONY: test-run-% test-make-% test-clean-% test-debug-%

# ============================================================================
# MAIN TEST TARGETS - Core test operations
# ============================================================================

# Run all tests with comprehensive reporting
test:
ifeq ($(VERBOSE),1)
	@echo "üß™ Running all tests from project root..."
else
	@echo "[TEST] RUN_ALL"
endif
	cd tests && $(MAKE) test VERBOSE=$(VERBOSE)

# Clean all test artifacts
test-clean:
ifeq ($(VERBOSE),1)
	@echo "üßπ Cleaning all test artifacts from project root..."
else
	@echo "[TEST] CLEAN_ALL"
endif
	cd tests && $(MAKE) clean VERBOSE=$(VERBOSE)

# ============================================================================
# INDIVIDUAL MODULE TARGETS - Work with specific test modules
# ============================================================================

# Run tests for a specific module
test-run-%:
ifeq ($(VERBOSE),1)
	@echo "üß™ Running tests for $* from project root..."
else
	@echo "[TEST] RUN $*"
endif
	cd tests && $(MAKE) test-run-$* VERBOSE=$(VERBOSE)

# Build tests for a specific module (without running)
test-make-%:
ifeq ($(VERBOSE),1)
	@echo "üîß Building tests for $* from project root..."
else
	@echo "[TEST] BUILD $*"
endif
	cd tests && $(MAKE) test-make-$* VERBOSE=$(VERBOSE)

# Clean artifacts for a specific module
test-clean-%:
ifeq ($(VERBOSE),1)
	@echo "üßπ Cleaning test artifacts for $* from project root..."
else
	@echo "[TEST] CLEAN $*"
endif
	cd tests && $(MAKE) test-clean-$* VERBOSE=$(VERBOSE)

# Debug configuration for a specific module
test-debug-%:
ifeq ($(VERBOSE),1)
	@echo "üêõ Debug configuration for $* from project root..."
else
	@echo "[TEST] DEBUG $*"
endif
	cd tests && $(MAKE) test-debug-$* VERBOSE=$(VERBOSE)

# ============================================================================
# UTILITY TARGETS - Help and project-wide operations
# ============================================================================

# Show test help information
test-help:
ifeq ($(VERBOSE),1)
	@echo "üìã CppBoilerplate Test Targets (Project Root)"
	@echo ""
	@echo "üéØ Main targets:"
	@echo "  test                   - Run all tests with comprehensive reporting"
	@echo "  test-clean             - Clean all test artifacts"
	@echo "  test-help              - Show this help message"
	@echo "  test-stats             - Show test project statistics"
	@echo "  test-debug-all         - Debug all module configurations"
	@echo ""
	@echo "üîß Individual module targets:"
	@echo "  test-run-<module>      - Build and run tests for a specific module"
	@echo "  test-make-<module>     - Build tests for a specific module (without running)"
	@echo "  test-clean-<module>    - Clean artifacts for a specific module"
	@echo "  test-debug-<module>    - Show debug configuration for a specific module"
	@echo ""
	@echo "üí° Examples:"
	@echo "  make test-run-LoggerTest     # Run Logger tests"
	@echo "  make test-debug-ServiceATest # Debug ServiceA test configuration"
	@echo "  make test                    # Run all tests with full reporting"
	@echo ""
	@echo "‚ÑπÔ∏è  For more detailed help, use: cd tests && make help"
else
	@echo "[TEST] HELP"
	@echo "test test-clean test-help test-stats test-debug-all"
	@echo "test-run-<module> test-make-<module> test-clean-<module> test-debug-<module>"
endif

# Show test project statistics
test-stats:
ifeq ($(VERBOSE),1)
	@echo "üìä Test Project Statistics (from project root):"
else
	@echo "[TEST] STATS"
endif
	cd tests && $(MAKE) stats VERBOSE=$(VERBOSE)

# Debug all module configurations
test-debug-all:
ifeq ($(VERBOSE),1)
	@echo "üêõ Debug all test module configurations (from project root):"
else
	@echo "[TEST] DEBUG_ALL"
endif
	cd tests && $(MAKE) debug-all VERBOSE=$(VERBOSE)